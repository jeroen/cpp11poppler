// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// bindings.cpp
bool set_poppler_data(std::string path);
extern "C" SEXP _cpp11poppler_set_poppler_data(SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_poppler_data(cpp11::as_cpp<cpp11::decay_t<std::string>>(path)));
  END_CPP11
}
// bindings.cpp
cpp11::list get_poppler_config();
extern "C" SEXP _cpp11poppler_get_poppler_config() {
  BEGIN_CPP11
    return cpp11::as_sexp(get_poppler_config());
  END_CPP11
}
// bindings.cpp
cpp11::list poppler_pdf_info(cpp11::raws x, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_info(SEXP x, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_info(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
list poppler_pdf_data(cpp11::raws x, bool get_font_info, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_data(SEXP x, SEXP get_font_info, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_data(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(get_font_info), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
cpp11::strings poppler_pdf_text(cpp11::raws x, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_text(SEXP x, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_text(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
cpp11::data_frame poppler_pdf_pagesize(cpp11::raws x, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_pagesize(SEXP x, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_pagesize(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
cpp11::list poppler_pdf_fonts(cpp11::raws x, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_fonts(SEXP x, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_fonts(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
cpp11::list poppler_pdf_files(cpp11::raws x, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_files(SEXP x, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_files(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
cpp11::list poppler_pdf_toc(cpp11::raws x, std::string opw, std::string upw);
extern "C" SEXP _cpp11poppler_poppler_pdf_toc(SEXP x, SEXP opw, SEXP upw) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_pdf_toc(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw)));
  END_CPP11
}
// bindings.cpp
writable::raws poppler_render_page(raws x, int pagenum, double dpi, std::string opw, std::string upw, bool antialiasing, bool text_antialiasing);
extern "C" SEXP _cpp11poppler_poppler_render_page(SEXP x, SEXP pagenum, SEXP dpi, SEXP opw, SEXP upw, SEXP antialiasing, SEXP text_antialiasing) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_render_page(cpp11::as_cpp<cpp11::decay_t<raws>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(pagenum), cpp11::as_cpp<cpp11::decay_t<double>>(dpi), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw), cpp11::as_cpp<cpp11::decay_t<bool>>(antialiasing), cpp11::as_cpp<cpp11::decay_t<bool>>(text_antialiasing)));
  END_CPP11
}
// bindings.cpp
std::vector<std::string> poppler_convert(cpp11::raws x, std::string format, std::vector<int> pages, std::vector<std::string> names, double dpi, std::string opw, std::string upw, bool antialiasing, bool text_antialiasing, bool verbose);
extern "C" SEXP _cpp11poppler_poppler_convert(SEXP x, SEXP format, SEXP pages, SEXP names, SEXP dpi, SEXP opw, SEXP upw, SEXP antialiasing, SEXP text_antialiasing, SEXP verbose) {
  BEGIN_CPP11
    return cpp11::as_sexp(poppler_convert(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<std::string>>(format), cpp11::as_cpp<cpp11::decay_t<std::vector<int>>>(pages), cpp11::as_cpp<cpp11::decay_t<std::vector<std::string>>>(names), cpp11::as_cpp<cpp11::decay_t<double>>(dpi), cpp11::as_cpp<cpp11::decay_t<std::string>>(opw), cpp11::as_cpp<cpp11::decay_t<std::string>>(upw), cpp11::as_cpp<cpp11::decay_t<bool>>(antialiasing), cpp11::as_cpp<cpp11::decay_t<bool>>(text_antialiasing), cpp11::as_cpp<cpp11::decay_t<bool>>(verbose)));
  END_CPP11
}
// bindings.cpp
void set_error_callback();
extern "C" SEXP _cpp11poppler_set_error_callback() {
  BEGIN_CPP11
    set_error_callback();
    return R_NilValue;
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_cpp11poppler_get_poppler_config",   (DL_FUNC) &_cpp11poppler_get_poppler_config,    0},
    {"_cpp11poppler_poppler_convert",      (DL_FUNC) &_cpp11poppler_poppler_convert,      10},
    {"_cpp11poppler_poppler_pdf_data",     (DL_FUNC) &_cpp11poppler_poppler_pdf_data,      4},
    {"_cpp11poppler_poppler_pdf_files",    (DL_FUNC) &_cpp11poppler_poppler_pdf_files,     3},
    {"_cpp11poppler_poppler_pdf_fonts",    (DL_FUNC) &_cpp11poppler_poppler_pdf_fonts,     3},
    {"_cpp11poppler_poppler_pdf_info",     (DL_FUNC) &_cpp11poppler_poppler_pdf_info,      3},
    {"_cpp11poppler_poppler_pdf_pagesize", (DL_FUNC) &_cpp11poppler_poppler_pdf_pagesize,  3},
    {"_cpp11poppler_poppler_pdf_text",     (DL_FUNC) &_cpp11poppler_poppler_pdf_text,      3},
    {"_cpp11poppler_poppler_pdf_toc",      (DL_FUNC) &_cpp11poppler_poppler_pdf_toc,       3},
    {"_cpp11poppler_poppler_render_page",  (DL_FUNC) &_cpp11poppler_poppler_render_page,   7},
    {"_cpp11poppler_set_error_callback",   (DL_FUNC) &_cpp11poppler_set_error_callback,    0},
    {"_cpp11poppler_set_poppler_data",     (DL_FUNC) &_cpp11poppler_set_poppler_data,      1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cpp11poppler(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
